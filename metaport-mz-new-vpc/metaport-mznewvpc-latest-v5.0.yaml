---
AWSTemplateFormatVersion: "2010-09-09"
Description: This template deploys a pair of Metaport connector in privates subnet across availability zones  (20200923)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - PublicSubnet1ACidr
          - PublicSubnet1BCidr
          - PrivateSubnet1ACidr
          - PrivateSubnet1BCidr
          - CreateNATGateway
          - ResourcesTagName

      - Label:
          default: "MetaPort EC2 Instance Configuration"
        Parameters:
          - InstanceType
          - LatestAMI
          - KeyName
          - SSHLocation
          - SSMRoleAgreement

      - Label:
          default: "MetaPort Installation Token"
        Parameters:
          - InstallationToken1
          - InstallationToken2

    ParameterLabels:
      VpcCidr: 
        default: VPC ID
      PublicSubnet1ACidr:
        default: Public subnet 1A CIDR
      PublicSubnet1BCidr:
        default: Public subnet 1B CIDR
      PrivateSubnet1ACidr:
        default: Private subnet A CIDR
      PrivateSubnet1BCidr:
        default: Private subnet B CIDR
      ResourcesTagName:
        default: Resources prefix tag
      CreateNATGateway:
        default: NAT Gateway Required?
      InstanceType:
        default: Instance type
      LatestAMI:
        default: MetaPort AMI ID
      KeyName:
        default: Key Name
      SSHLocation:
        default: SSH Location
      SSMRoleAgreement:
        default: Sessions Manager (SSM-SM)
      InstallationToken1:
        default: MetaportA Installation Token
      InstallationToken2:
        default: MetaportB Installation Token

Parameters:
  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: '192.168.0.0/16'
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PublicSubnet1ACidr:
    Description: CIDR block for public subnet A located in the 1st Availability Zone
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: '192.168.1.0/24'
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PublicSubnet1BCidr:
    Description: CIDR block for public subnet A located in the 1st Availability Zone
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: '192.168.2.0/24'
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PrivateSubnet1ACidr:
    Description: CIDR block for private subnet A located in the 1st Availability Zone
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: '192.168.3.0/24'
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PrivateSubnet1BCidr:
    Description: CIDR block for private subnet A located in the 1st Availability Zone
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: '192.168.4.0/24'
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  ResourcesTagName:
    Description: (optional)
    Type: String

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the MetaPort
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Please choose a valid KeyName

  SSHLocation:
    Description: >-
      The source IP address (/32) or source IP address range (x.x.x.x/x) that will be allowed to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  InstallationToken1:
    Description: The installation token obtained from the Meta management console
    Type: String
    NoEcho: 'true'
    MinLength: '8'
    MaxLength: '255'
    AllowedPattern: "[a-zA-Z0-9]*"

  InstallationToken2:
    Description: The installation token obtained from the Meta management console
    Type: String
    NoEcho: 'true'
    MinLength: '8'
    MaxLength: '255'
    AllowedPattern: "[a-zA-Z0-9]*"

  InstanceType:
    Description: >-
      Choose the EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - c5.large
      - c5.xlarge
      - c5n.large
      - c5n.xlarge
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: "must be a valid EC2 instance type."

  LatestAMI:
    Description: The Latest MetaPort AMI ID
    Type: AWS::EC2::Image::Id

  SSMRoleAgreement:
    Description: Do you want to create an SSM Role for sessions manager access? (Agree/Disagree)
    Type: String
    Default: Agree
    AllowedValues:
      - Agree
      - Disagree
    ConstraintDescription: must be Agree or Disagree

  CreateNATGateway:
    Description: Do you require a NAT Gateway? (Yes/No)
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
    ConstraintDescription: must be yes or no

Conditions:
  CreateSSMRole:
    'Fn::Not':
      - 'Fn::Equals':
        - Ref: SSMRoleAgreement
        - Disagree

  NatGatewayCondition:
    'Fn::Not':
      - 'Fn::Equals':
        - Ref: 'CreateNATGateway'
        - 'No'

  ResourcesTagNameGiven:
    'Fn::Not':
      - 'Fn::Equals':
          - Ref: ResourcesTagName
          - ''

Resources:
# Custom VPC Configuration
  MetaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - _
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - MetaVPC

# Internet Gateway and VPC Attachment Configuration
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MetaVPC
      InternetGatewayId:
        Ref: InternetGateway

# Public Subnets Configuration
  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MetaVPC
      CidrBlock:
        Ref: PublicSubnet1ACidr
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        'Fn::Select': 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - _
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - PublicSubnet1A

  PublicSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MetaVPC
      CidrBlock:
        Ref: PublicSubnet1BCidr
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        'Fn::Select': 
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - _
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - PublicSubnet1B

# Private Subnets Configuration
  PrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MetaVPC
      CidrBlock:
        Ref: PrivateSubnet1ACidr
      AvailabilityZone: 
        'Fn::Select': 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - _
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - PrivateSubnet1A

  PrivateSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MetaVPC
      CidrBlock:
        Ref: PrivateSubnet1BCidr
      AvailabilityZone: 
        'Fn::Select': 
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - _
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - PrivateSubnet1B

# Public Route Table Association Configuration
  PublicSubnet1ARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MetaVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - PublicSubnet1ARouteTable

  PublicSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet1ARouteTable
      SubnetId:
        Ref: PublicSubnet1A

  DefaultPublic1ARoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicSubnet1ARouteTable

  PublicSubnet1BRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MetaVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - PublicSubnet1BRouteTable

  PublicSubnet1BRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet1BRouteTable
      SubnetId:
        Ref: PublicSubnet1B

  DefaultPublic1BRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicSubnet1BRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicSubnet1BRouteTable

# Private Route Table Association Configuration
  PrivateSubnet1ARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MetaVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - PrivateSubnet1ARouteTable

  PrivateSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnet1ARouteTable
      SubnetId:
        Ref: PrivateSubnet1A

  DefaultPrivate1ARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnet1ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        'Fn::If':
          - NatGatewayCondition
          - Ref: NatGateway1
          - Ref: 'AWS::NoValue'

  PrivateSubnet1BRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MetaVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - PrivateSubnet1BRouteTable

  PrivateSubnet1BRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnet1BRouteTable
      SubnetId:
        Ref: PrivateSubnet1B

  DefaultPrivate1BRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnet1BRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        'Fn::If':
          - NatGatewayCondition
          - Ref: NatGateway2
          - Ref: 'AWS::NoValue'

# NAT Gateway and EIP Configuration
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: NatGatewayCondition
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: NatGatewayCondition
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - NatGateway1EIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1A
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - NatGateway1

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: NatGatewayCondition
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: NatGatewayCondition
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - NatGateway2EIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1B
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - NatGateway2

# MetaPortA Instance Configuration
  MetaPortA:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        'Fn::If':
          - CreateSSMRole
          - Ref: MetaPortInstanceProfile
          - Ref: 'AWS::NoValue'
      ImageId:
        Ref: LatestAMI
      InstanceType: 
        Ref: InstanceType
      SubnetId:
        Ref: PrivateSubnet1A
      AvailabilityZone:
        'Fn::Select':
          - 0
          - Fn::GetAZs: ""
      SecurityGroupIds: 
        - Ref: MetaSecurityGroup
      KeyName: 
        Ref: KeyName
      # Metaport Onboard Script [Provide your OTAP Code]
      UserData:
        Fn::Base64: !Join
          - '\n'
          - - !Sub |
              #!/bin/bash
              su mpadmin -c "metaport onboard ${InstallationToken1}" > metaport_onboard.txt
              shutdown -r +1
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - MetaPortA

# MetaPortB Instance Configuration
  MetaPortB:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        'Fn::If':
          - CreateSSMRole
          - Ref: MetaPortInstanceProfile
          - Ref: 'AWS::NoValue'
      ImageId:
        Ref: LatestAMI
      InstanceType: 
        Ref: InstanceType
      SubnetId:
        Ref: PrivateSubnet1B
      AvailabilityZone:
        'Fn::Select':
          - 1
          - Fn::GetAZs: ""
      SecurityGroupIds: 
        - Ref: MetaSecurityGroup
      KeyName: 
        Ref: KeyName
      # Metaport Onboard Script [Provide your OTAP Code]
      UserData:
        Fn::Base64: !Join
          - '\n'
          - - !Sub |
              #!/bin/bash
              su mpadmin -c "metaport onboard ${InstallationToken2}" > metaport_onboard.txt
              shutdown -r +1
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - MetaPortB

# Create SSM-SM Role based on user agreement condition
  MetaPortSSMIAMRole:
    Type: AWS::IAM::Role
    Condition: CreateSSMRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
    
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  MetaPortInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateSSMRole
    Properties:
      Path: /
      Roles:
        - Ref: MetaPortSSMIAMRole

# Metaport Standard Security Group
  MetaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MetaPort Security Group
      VpcId:
        Ref: MetaVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - 'Fn::If':
                    - ResourcesTagNameGiven
                    - Ref: ResourcesTagName
                    - Ref: 'AWS::StackName'
                - MetaSecurityGroup

# Metaport Inbound SSH and ICMP Security Group (Must be Connected to NaaS)
  SecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Inbound SSH to the MetaPort
      GroupId:
        Ref: MetaSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp:
        Ref: SSHLocation

  SecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Inbound SSH to the MetaPort
      GroupId:
        Ref: MetaSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp:
        Ref: SSHLocation

# Metaport Outbound IPSec Security Group
  SecurityGroupEgressICMP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow Outbound ICMP Traffic
      GroupId:
        Ref: MetaSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0

  SecurityGroupEgressHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow Outbound HTTPS Traffic
      GroupId:
        Ref: MetaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  SecurityGroupEgressIKE:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow Outbound IKE Traffic
      GroupId:
        Ref: MetaSecurityGroup
      IpProtocol: udp
      FromPort: 500
      ToPort: 500
      CidrIp: 0.0.0.0/0

  SecurityGroupEgressNATT:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow Outbound NAT-T Traffic
      GroupId:
        Ref: MetaSecurityGroup
      IpProtocol: udp
      FromPort: 4500
      ToPort: 4500
      CidrIp: 0.0.0.0/0

Outputs:
  VPCId:
    Description: Meta VPC CIDR
    Value:
      Ref: VpcCidr

  PublicSubnetAId:
    Description: Public Subnet A
    Value:
      Ref: PublicSubnet1A

  PrivateSubnetAId:
    Description: Private Subnet A
    Value:
      Ref: PrivateSubnet1A

  PrivateSubnetBId:
    Description: Private Subnet B
    Value:
      Ref: PrivateSubnet1B

  MetaSecurityGroup:
    Value:
      Ref: MetaSecurityGroup

  NATGWEIP1:
    Description: NAT Gateway Elastic IP
    Value:
      Ref: NatGateway1EIP

  NATGWEIP2:
    Description: NAT Gateway Elastic IP
    Value:
      Ref: NatGateway2EIP

  MetaPortAAvailabilityZone:
    Description: MetaportA Private IP Address
    Value:
      'Fn::GetAtt':
        - MetaPortA
        - AvailabilityZone

  MetaPortBAvailabilityZone:
    Description: MetaportB Private IP Address
    Value:
      'Fn::GetAtt':
        - MetaPortB
        - AvailabilityZone

  MetaPortAPrivateIPAddress:
    Description: MetaportA Private IP Address
    Value:
      'Fn::GetAtt':
        - MetaPortA
        - PrivateIp

  MetaPortBPrivateIPAddress:
    Description: MetaportB Private IP Address
    Value:
      'Fn::GetAtt':
        - MetaPortB
        - PrivateIp

  MetaPortAPrivateDnsName:
    Description: MetaportA Private DNS Name
    Value:
      'Fn::GetAtt':
        - MetaPortA
        - PrivateDnsName

  MetaPortBPrivateDnsName:
    Description: MetaportB Private DNS Name
    Value:
      'Fn::GetAtt':
        - MetaPortB
        - PrivateDnsName